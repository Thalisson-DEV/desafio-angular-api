version: '3.8'

services:
  # Serviço do banco de dados PostgreSQL
  db:
    image: postgres:15
    container_name: desafio-db
    ports:
      # CRÍTICO: Mapeamento para localhost
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=dbpassword123 # Senha unificada
      - POSTGRES_DB=desafio
    # CRÍTICO: Usamos um novo volume para garantir a limpeza total
    volumes:
      - postgres-data-final:/var/lib/postgresql/data
    networks:
      - desafio-network
    restart: always

    # Mantemos o Healthcheck para garantir que a API só inicie quando o DB estiver PRONTO
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d desafio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da aplicação Spring Boot
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: desafio-angular-api
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/desafio
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=dbpassword123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - desafio-network
    restart: always

  # Serviço pgAdmin (completo)
  pgadmin:
    image: dpage/pgadmin4
    container_name: desafio-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@exemplo.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - desafio-network
    restart: always

# Configuração de volumes para persistência de dados
volumes:
  postgres-data-final: # Novo nome definitivo do volume
  pgadmin-data:

# Configuração de rede para comunicação entre os containers
networks:
  desafio-network:
    driver: bridge